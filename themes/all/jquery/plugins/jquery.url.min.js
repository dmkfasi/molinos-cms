/*
 * URL helpers 0.1.0 (18.07.2008)
 * 
 * Misc functions to have fun with URL
 * 
 * Copyright (c) 2008 Dmitriy Chekanov (d.chekanov@gmail.com)
 * 
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *   
 * Base64 encode/decode part taken from http://www.webtoolkit.info/
 * objSource function taken from http://dererumnatura.us/archives/2008/03/remembering-las.html
 */

(function($) {
	$.extend({
		/**
		 * Misc functions to work with URL
		 */
		url: {
			/**
			 * Misc functions to work with hash
			 */
			hash: {
				/**
				 * Monitors hash value and fires registered callbacks on change.
				 * Callbacks can be dynamically added/removed.
				 */
				monitor: {
					// list of all registered callbacks
					callbacks: {},
					// length of the list above
					callbacksLength: 0,
					// variable to compare current hash value with - to detect if hash has been changed
					oldhashvalue: location.hash,
					// adds callback to list
					addCallback: function(name, callback){
						// register new callback
						this.callbacks[name] = callback;
						// +1 to callback list length
						this.callbacksLength++;
						// if monitor wasn't running - start it
						if (this.callbacksLength == 1) this.start();
					},
					// removes callback from list
					removeCallback: function(name){
						// register callback
						delete this.callbacks[name];
						// -1 to callback list length
						this.callbacksLength--;
						// if no more callbacks - stop monitoring
						if (this.callbacksLength == 0) this.stop();
					},
					// starts hash value monitoring 
					start: function(){
						// function to be run every 200ms
						this.checker = setInterval(function(){
							// check if location.hash has been changed
							if ($.url.hash.monitor.oldhashvalue != location.hash) {
								// if so - fire each registered callbacks
								$.each($.url.hash.monitor.callbacks, function(){
									this();
								});
								// update stored hash value
								$.url.hash.monitor.oldhashvalue = location.hash;
							};
						}, 100);
					},
					// stops hash value monitoring 
					stop: function(){
						clearInterval(this.checker);
					}
				},
				/**
				 * Brings support for storing misc data in hash value.
 				 * Stored data can be optionally encrypted (unsecure base64)
				 */
				data: {
					// prefs
					options: {
						encode: true
					},
					/**
					 * Parses location.hash value to return stored datadata
					 * @param {Object} objectName
					 */
					get: function(objectName){
						// if hash is empty - do nothing
						if (!location.hash) return;
						// match stored data
						var hashdata = location.hash.match(/data:.*/);
						// if no data - return
						if (!hashdata) return;
						// prepare matched string
						this.options.encode ? hashdata = $.base64.decode(hashdata[0].replace('data:', '') ): hashdata = decodeURI(hashdata[0].replace('data:', '') );
						// parse matched string to get data as object
						hashdata = jsonParse(hashdata);
						// return full set, if no objectName was specified
						if (!objectName) {
							return hashdata;
						} 
						// else - return only object, specified in objectName
						else {
							if (hashdata[objectName]) return hashdata[objectName]
						};
					},
					/**
					 * Stores datadata in location.hash
					 * @param {Object} objectName
					 */
					set: function(objectName, objectContent){
						// match stored data
						var hashdata = location.hash.match(/data:.*/);
						// there are some data
						if (hashdata) {
							// get cleaned-up hash
							var cleanedHash = location.hash.replace(hashdata, '');
							// prepare matched string
							this.options.encode ? hashdata = 'data:' + $.base64.decode(hashdata[0].replace('data:', '') ): hashdata = decodeURI(hashdata[0]);
							// parse matched string to get data as object
							hashdata = jsonParse(hashdata);
							// replace object contents
							hashdata[objectName] = objectContent;
							// string repr
							hashdata = $.objSource(hashdata);
							//encode data, if needed
							if (this.options.encode) hashdata = $.base64.encode(hashdata);
							// set hash value
							location.hash = cleanedHash + 'data:' +hashdata;
						} 
						// no data found in hash value
						else {
							//transform passed args to string
							hashdata = '{"' + objectName + '":' + $.objSource(objectContent) + '}';
							//encode data, if needed
							if (this.options.encode) hashdata = $.base64.encode(hashdata);
							//set hash
							(location.hash.length == 0) ? location.hash = 'data:' + hashdata : location.hash = location.hash + ',data:' + hashdata;
						};
					}
				}
			}
		},
		/**
		 * Returns a string representing the source code of the object
		 * @param {Object} obj
		 */
		objSource: function(obj) {
			if (typeof obj == 'undefined') return 'null';
			switch (typeof obj) {
			case 'number':
				return obj;
				break;
			case 'string':
				return '"' + obj.toString() + '"';
				break;
			case 'object':
				var str = [];
				switch(obj.constructor) {
				case Function:
					return 'null';
				case String:
				case Number:
					return obj.toString();
				case Array:
					var i=0,j=obj.length;
					while(i<j) {
						str.push($.objSource(obj[i++]));
					}
					str=['[',str.join(','),']'];
					break;
				default:
					for(var i in obj){
						var v = $.objSource(obj[i]);
						if(typeof(v) != 'undefined') {
							str.push($.objSource(i)+':'+v);
						}
					}
					str=['{',str.join(','),'}'];
				}
				return str.join('');
			default:
				break;
			}
			return 'null';
		},
		base64: {
		    // private property
		    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
		
		    // public method for encoding
		    encode : function (input) {
		        var output = "";
		        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		        var i = 0;
		
		        input = $.base64._utf8_encode(input);
		
		        while (i < input.length) {
		
		            chr1 = input.charCodeAt(i++);
		            chr2 = input.charCodeAt(i++);
		            chr3 = input.charCodeAt(i++);
		
		            enc1 = chr1 >> 2;
		            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
		            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
		            enc4 = chr3 & 63;
		
		            if (isNaN(chr2)) {
		                enc3 = enc4 = 64;
		            } else if (isNaN(chr3)) {
		                enc4 = 64;
		            }
		
		            output = output +
		            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
		            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
		
		        }
		
		        return output;
		    },
		
		    // public method for decoding
		    decode : function (input) {
		        var output = "";
		        var chr1, chr2, chr3;
		        var enc1, enc2, enc3, enc4;
		        var i = 0;
		
		        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
		
		        while (i < input.length) {
		
		            enc1 = this._keyStr.indexOf(input.charAt(i++));
		            enc2 = this._keyStr.indexOf(input.charAt(i++));
		            enc3 = this._keyStr.indexOf(input.charAt(i++));
		            enc4 = this._keyStr.indexOf(input.charAt(i++));
		
		            chr1 = (enc1 << 2) | (enc2 >> 4);
		            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
		            chr3 = ((enc3 & 3) << 6) | enc4;
		
		            output = output + String.fromCharCode(chr1);
		
		            if (enc3 != 64) {
		                output = output + String.fromCharCode(chr2);
		            }
		            if (enc4 != 64) {
		                output = output + String.fromCharCode(chr3);
		            }
		
		        }
		
		        output = $.base64._utf8_decode(output);
		
		        return output;
		
		    },
		
		    // private method for UTF-8 encoding
		    _utf8_encode : function (string) {
		        string = string.replace(/\r\n/g,"\n");
		        var utftext = "";
		
		        for (var n = 0; n < string.length; n++) {
		
		            var c = string.charCodeAt(n);
		
		            if (c < 128) {
		                utftext += String.fromCharCode(c);
		            }
		            else if((c > 127) && (c < 2048)) {
		                utftext += String.fromCharCode((c >> 6) | 192);
		                utftext += String.fromCharCode((c & 63) | 128);
		            }
		            else {
		                utftext += String.fromCharCode((c >> 12) | 224);
		                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
		                utftext += String.fromCharCode((c & 63) | 128);
		            }
		
		        }
		
		        return utftext;
		    },
		
		    // private method for UTF-8 decoding
		    _utf8_decode : function (utftext) {
		        var string = "";
		        var i = 0;
		        var c = c1 = c2 = 0;
		
		        while ( i < utftext.length ) {
		
		            c = utftext.charCodeAt(i);
		
		            if (c < 128) {
		                string += String.fromCharCode(c);
		                i++;
		            }
		            else if((c > 191) && (c < 224)) {
		                c2 = utftext.charCodeAt(i+1);
		                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
		                i += 2;
		            }
		            else {
		                c2 = utftext.charCodeAt(i+1);
		                c3 = utftext.charCodeAt(i+2);
		                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
		                i += 3;
		            }
		
		        }
		
		        return string;
		    }
		}
	});
	
	// $.url.hash.data - support for normal hash directions
	$(function(){
		// if hash is empty - do nothing
		if (!location.hash) return;
		// get stored data
		var hashdata = location.hash.match(/data:.*/);
		// if no data - return
		if (!hashdata) return;
		hashdata = hashdata[0];
		var cleanedHash, newHash;
		if (location.hash.length - 1 == hashdata.length) {
			cleanedHash = location.hash.replace(hashdata, '');
			newHash = cleanedHash + hashdata;
		}
		else {
			cleanedHash = location.hash.replace(',' + hashdata, '');
			newHash = cleanedHash + ',' + hashdata;
		}
		if (cleanedHash.length != 1) {
			location.hash = cleanedHash;
			location.hash = newHash;
		};
	});
	
})(jQuery);